# Generated by Django 4.2.16 on 2024-11-06 19:13

import app.admission.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('academic', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admission_no', models.CharField(blank=True, help_text='Unique admission number for the student', max_length=12, null=True, unique=True, verbose_name='Admission Number')),
                ('admission_type', models.CharField(choices=[('REGULAR', 'Regular'), ('TRANSFER', 'Transfer'), ('RE_ADMISSION', 'Re-Admission')], help_text='Type of admission (New/Transfer)', max_length=50, verbose_name='Admission Type')),
                ('admission_confirmation_date', models.DateField(blank=True, help_text='Date when admission was confirmed', null=True, verbose_name='Admission Confirmation Date')),
                ('marks_in_previous_school', models.PositiveIntegerField(blank=True, help_text='Marks obtained in previous school', null=True, verbose_name='Marks in Previous School')),
                ('previous_school_roll_no', models.CharField(blank=True, help_text='Roll number in the previous school', max_length=20, null=True, verbose_name='Previous School Roll No')),
                ('enrollment_status', models.CharField(choices=[('ENROLLED', 'Enrolled'), ('PENDING', 'Pending'), ('WITHDRAWN', 'Withdrawn')], help_text='Current enrollment status of the student', max_length=50, verbose_name='Enrollment Status')),
                ('test_passed', models.BooleanField(default=False, help_text='Indicates whether the admission test was passed', verbose_name='Test Passed')),
                ('admission_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admitted_class', to='academic.class', verbose_name='Admission Class')),
                ('admission_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.section', verbose_name='Admission Section')),
                ('class_required', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='required_class', to='academic.class', verbose_name='Class Required')),
            ],
        ),
        migrations.CreateModel(
            name='AdditionalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('extra_act', models.TextField(blank=True, help_text='Details of extracurricular activities', null=True, verbose_name='Extracurricular Activities')),
                ('sibling', models.TextField(blank=True, help_text='Information about siblings', null=True, verbose_name='Sibling Information')),
                ('remarks', models.TextField(blank=True, help_text='Any additional remarks', null=True, verbose_name='Remarks')),
                ('is_alive', models.BooleanField(default=True, help_text='Indicates if the student is alive', verbose_name='Is Alive')),
                ('is_security_voucher_generated', models.BooleanField(default=False, help_text='Indicates if a security voucher has been generated', verbose_name='Security Voucher Generated')),
                ('is_voucher_generated', models.BooleanField(default=False, help_text='Indicates if a voucher has been generated', verbose_name='Voucher Generated')),
                ('admission_by', models.CharField(max_length=100, verbose_name='Admitted By')),
                ('other_information', models.TextField(blank=True, null=True, verbose_name='Other Information')),
                ('nationality', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.nationality')),
                ('religion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.religion')),
            ],
        ),
        migrations.CreateModel(
            name='Occupation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Enter the occupation (e.g., Doctor, Engineer).', max_length=100, verbose_name='Occupation')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(help_text='Enter the full name of the individual.', max_length=150, verbose_name='Full Name')),
                ('date_of_birth', models.DateField(help_text='Enter the date of birth.', verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], help_text='Select the gender.', max_length=6, verbose_name='Gender')),
                ('blood_group', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], help_text='Select the blood group.', max_length=3, verbose_name='Blood Group')),
                ('place_of_birth', models.CharField(help_text='Enter the place of birth.', max_length=128, verbose_name='Place of Birth')),
                ('current_address', models.CharField(help_text='Enter the current address.', max_length=255, verbose_name='Current Address')),
                ('permanent_address', models.CharField(help_text='Enter the permanent address.', max_length=255, verbose_name='Permanent Address')),
                ('mobile_number', models.CharField(help_text='Enter an 11-digit mobile number.', max_length=11, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'Enter a valid 11-digit mobile number.')], verbose_name='Mobile Number')),
                ('email', models.EmailField(help_text='Enter a valid email address.', max_length=254, verbose_name='Email Address')),
                ('general_health', models.CharField(choices=[('GOOD', 'Good'), ('FAIR', 'Fair'), ('POOR', 'Poor')], help_text='Select general health status.', max_length=50, verbose_name='General Health Status')),
                ('immunization', models.CharField(choices=[('FULLY_VACCINATED', 'Fully Vaccinated'), ('PARTIALLY_VACCINATED', 'Partially Vaccinated'), ('NOT_VACCINATED', 'Not Vaccinated')], help_text='Select immunization status.', max_length=50, verbose_name='Immunization Status')),
                ('disabilities', models.CharField(blank=True, help_text='Enter any known disabilities, if any.', max_length=255, null=True, verbose_name='Disabilities')),
                ('mark_of_identification', models.CharField(blank=True, help_text='Enter any identifying marks, if any.', max_length=255, null=True, verbose_name='Mark of Identification')),
                ('child', models.CharField(blank=True, help_text="Enter the child's full name (if applicable).", max_length=100, null=True, verbose_name="Child's Name")),
                ('form_b_no', models.CharField(blank=True, help_text='Enter the Form B number (if applicable).', max_length=50, null=True, verbose_name='Form B Number')),
                ('phone_residence', models.CharField(blank=True, help_text='Enter the residence phone number.', max_length=15, null=True, verbose_name='Residence Phone Number')),
                ('office_address', models.CharField(blank=True, help_text='Enter the office address.', max_length=255, null=True, verbose_name='Office Address')),
            ],
            options={
                'indexes': [models.Index(fields=['full_name'], name='full_name_idx'), models.Index(fields=['date_of_birth'], name='dob_idx')],
            },
        ),
        migrations.CreateModel(
            name='ParentInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('father_full_name', models.CharField(help_text="Enter the father's full name.", max_length=100, verbose_name='Father Full Name')),
                ('father_cnic', models.CharField(help_text="Enter the father's CNIC.", max_length=15, validators=[app.admission.models.validate_cnic], verbose_name="Father's CNIC")),
                ('mother_full_name', models.CharField(help_text="Enter the mother's full name.", max_length=100, verbose_name='Mother Full Name')),
                ('mother_cnic', models.CharField(help_text="Enter the mother's CNIC.", max_length=15, validators=[app.admission.models.validate_cnic], verbose_name="Mother's CNIC")),
                ('mother_mobile_number', models.CharField(help_text="Enter the mother's 11-digit mobile number.", max_length=11, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'Enter a valid 11-digit mobile number.')], verbose_name="Mother's Mobile Number")),
                ('mother_email', models.EmailField(help_text='Enter a valid email address.', max_length=254, verbose_name="Mother's Email Address")),
                ('mother_office_address', models.CharField(help_text="Enter the mother's office address.", max_length=255, verbose_name="Mother's Office Address")),
                ('mother_is_alive', models.BooleanField(default=True, help_text='Indicates if the mother is alive.', verbose_name='Is Mother Alive?')),
                ('father_occupation', models.ForeignKey(help_text="Select father's occupation.", on_delete=django.db.models.deletion.CASCADE, related_name='parentinfo_father_occupation', to='admission.occupation', verbose_name="Father's Occupation")),
                ('mother_occupation', models.ForeignKey(help_text="Select mother's occupation.", on_delete=django.db.models.deletion.CASCADE, related_name='parentinfo_mother_occupation', to='admission.occupation', verbose_name="Mother's Occupation")),
            ],
        ),
        migrations.CreateModel(
            name='GuardianInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(help_text="Enter the guardian's full name.", max_length=100, verbose_name='Guardian Full Name')),
                ('cnic', models.CharField(help_text="Enter the guardian's CNIC.", max_length=15, validators=[app.admission.models.validate_cnic], verbose_name="Guardian's CNIC")),
                ('mobile_number', models.CharField(blank=True, help_text="Enter the guardian's 11-digit mobile number.", max_length=11, null=True, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'Enter a valid 11-digit mobile number.')], verbose_name="Guardian's Mobile Number")),
                ('email', models.EmailField(blank=True, help_text='Enter a valid email address.', max_length=254, null=True, verbose_name="Guardian's Email Address")),
                ('home_address', models.CharField(blank=True, help_text="Enter the guardian's home address.", max_length=255, null=True, verbose_name="Guardian's Home Address")),
                ('office_address', models.CharField(blank=True, help_text="Enter the guardian's office address.", max_length=255, null=True, verbose_name="Guardian's Office Address")),
                ('relation_to_child', models.CharField(choices=[('FATHER', 'Father'), ('MOTHER', 'Mother'), ('GUARDIAN', 'Guardian'), ('OTHER', 'Other')], help_text="Enter the guardian's relation to the child.", max_length=50, verbose_name="Guardian's Relation to Child")),
                ('pick_and_drop', models.CharField(choices=[('YES', 'Yes'), ('NO', 'No')], help_text='Select if the child needs pick and drop service.', max_length=20, verbose_name='Pick and Drop')),
                ('pick_and_drop_by', models.CharField(blank=True, help_text='Enter the name of the person responsible for pick and drop.', max_length=100, null=True, verbose_name='Pick and Drop By')),
                ('pick_and_drop_cnic', models.CharField(blank=True, help_text='Enter the CNIC of the person responsible for pick and drop.', max_length=15, null=True, validators=[app.admission.models.validate_cnic], verbose_name='Pick and Drop CNIC')),
                ('occupation', models.ForeignKey(blank=True, help_text="Select guardian's occupation.", null=True, on_delete=django.db.models.deletion.SET_NULL, to='admission.occupation', verbose_name="Guardian's Occupation")),
            ],
        ),
        migrations.CreateModel(
            name='FinancialInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fee_remaining_for_months', models.PositiveIntegerField(blank=True, help_text='Number of months with remaining fees', null=True, verbose_name='Fee Remaining for Months (if any)')),
                ('monthly_income', models.PositiveIntegerField(blank=True, help_text='Monthly income of the guardian', null=True, verbose_name='Monthly Income')),
                ('paid_dues_upto_slc', models.DateField(blank=True, help_text='Date of paid dues up to the SLC', null=True, verbose_name='Paid Dues up to School Leaving Certificate')),
                ('advance', models.PositiveIntegerField(default=0, verbose_name='Advance Payment')),
                ('arrears', models.PositiveIntegerField(default=0, verbose_name='Arrears')),
                ('total_arrear_months', models.PositiveIntegerField(default=0, verbose_name='Total Arrear Months')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='common.category', verbose_name='Category')),
            ],
        ),
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admission_status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Admission Status')),
                ('academic_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='admission.academicinfo', verbose_name='Academic Information')),
                ('additional_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='admission.additionalinfo', verbose_name='Additional Information')),
                ('applicant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Applicant')),
                ('financial_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='admission.financialinfo', verbose_name='Financial Information')),
                ('guardian_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='admission.guardianinfo', verbose_name='Guardian Information')),
                ('parent_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='admission.parentinfo', verbose_name='Parent Information')),
                ('personal_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='admission.personalinfo', verbose_name='Personal Information')),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='parentinfo',
            index=models.Index(fields=['father_full_name'], name='father_name_idx'),
        ),
        migrations.AddIndex(
            model_name='parentinfo',
            index=models.Index(fields=['mother_full_name'], name='mother_name_idx'),
        ),
        migrations.AddIndex(
            model_name='guardianinfo',
            index=models.Index(fields=['full_name'], name='guardian_name_idx'),
        ),
        migrations.AddIndex(
            model_name='financialinfo',
            index=models.Index(fields=['paid_dues_upto_slc'], name='paid_dues_upto_slc_idx'),
        ),
        migrations.AddIndex(
            model_name='additionalinfo',
            index=models.Index(fields=['nationality'], name='nationality_idx'),
        ),
        migrations.AddIndex(
            model_name='academicinfo',
            index=models.Index(fields=['admission_no'], name='admission_no_idx'),
        ),
        migrations.AddIndex(
            model_name='academicinfo',
            index=models.Index(fields=['admission_confirmation_date'], name='adm_conf_date_idx'),
        ),
    ]
