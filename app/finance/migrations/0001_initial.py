# Generated by Django 4.2.16 on 2024-11-10 10:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('employee', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bank_account_no', models.CharField(help_text='Unique account number for the bank.', max_length=255, unique=True, verbose_name='Bank Account Number')),
                ('bank_address', models.CharField(help_text='Physical address of the bank.', max_length=255, verbose_name='Bank Address')),
                ('bank_code', models.CharField(help_text='The unique code assigned to the bank.', max_length=255, verbose_name='Bank Code')),
                ('bank_contact', models.CharField(help_text='Contact number for the bank.', max_length=20, verbose_name='Bank Contact Number')),
                ('bank_for_security', models.BooleanField(default=False, help_text='Indicates if the bank is for security purposes.', verbose_name='Security Flag')),
                ('bank_manager', models.CharField(help_text='Name of the bank manager.', max_length=255, verbose_name='Bank Manager')),
                ('bank_name', models.CharField(help_text='Name of the bank.', max_length=255, verbose_name='Bank Name')),
                ('show_on_voucher', models.BooleanField(default=False, help_text='Indicates if the bank details should be shown on vouchers.', verbose_name='Show on Voucher')),
            ],
            options={
                'verbose_name': 'Bank',
                'verbose_name_plural': 'Banks',
            },
        ),
        migrations.CreateModel(
            name='CPFund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deposited_cp_fund', models.PositiveIntegerField(help_text='Amount deposited into the CP Fund.', verbose_name='Deposited CP Fund')),
                ('last_date_submitted', models.DateField(help_text='The last date when the CP Fund was submitted.', verbose_name='Last Date Submitted')),
                ('created_by', models.ForeignKey(help_text='User who created this CP Fund.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_funds', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('employee', models.OneToOneField(help_text='The employee associated with this CP Fund.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cpfund', to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'CP Fund',
                'verbose_name_plural': 'CP Funds',
            },
        ),
        migrations.CreateModel(
            name='Security',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deposited_security', models.PositiveIntegerField(help_text='Amount deposited as security.', verbose_name='Deposited Security')),
                ('last_date_submitted', models.DateField(help_text='The last date when the security deposit was made.', verbose_name='Last Date Submitted')),
                ('total_security', models.PositiveIntegerField(help_text='Total security amount deposited.', verbose_name='Total Security')),
                ('created_by', models.ForeignKey(help_text='Employee who created this security entry.', on_delete=django.db.models.deletion.CASCADE, related_name='created_security', to='employee.employee', verbose_name='Created By')),
                ('employee', models.OneToOneField(help_text='The employee associated with this security deposit.', on_delete=django.db.models.deletion.CASCADE, related_name='employee_security', to='employee.employee', verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Security',
                'verbose_name_plural': 'Securities',
            },
        ),
        migrations.CreateModel(
            name='SecurityDeposits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.PositiveIntegerField(help_text='The amount deposited as security.', verbose_name='Deposit Amount')),
                ('date_paid', models.DateField(help_text='The date when the security deposit was made.', verbose_name='Date Paid')),
                ('note', models.CharField(help_text='Any additional notes regarding the security deposit.', max_length=255, verbose_name='Note')),
                ('created_by', models.ForeignKey(help_text='Employee who created this security deposit entry.', on_delete=django.db.models.deletion.CASCADE, related_name='created_security_deposits', to='employee.employee', verbose_name='Created By')),
                ('security', models.ForeignKey(help_text='The security associated with this deposit.', on_delete=django.db.models.deletion.CASCADE, related_name='security_deposits', to='finance.security', verbose_name='Security')),
            ],
            options={
                'verbose_name': 'Security Deposit',
                'verbose_name_plural': 'Security Deposits',
            },
        ),
        migrations.CreateModel(
            name='OtherDeposits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.PositiveIntegerField(help_text='The amount deposited to the bank.', verbose_name='Deposit Amount')),
                ('date', models.DateField(help_text='The date when the deposit was made.', verbose_name='Deposit Date')),
                ('remarks', models.CharField(help_text='Any additional remarks regarding the deposit.', max_length=255, verbose_name='Remarks')),
                ('bank', models.ForeignKey(help_text='The bank where the deposit is made.', on_delete=django.db.models.deletion.CASCADE, related_name='other_deposits', to='finance.bank', verbose_name='Bank')),
            ],
            options={
                'verbose_name': 'Other Deposit',
                'verbose_name_plural': 'Other Deposits',
            },
        ),
        migrations.CreateModel(
            name='MonthClosing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('month', models.DateField(help_text='The month for which the closing is calculated.', verbose_name='Closing Month')),
                ('profit_by_bank', models.PositiveIntegerField(help_text='The profit calculated for this month closing.', verbose_name='Profit')),
                ('bank', models.ForeignKey(help_text='The bank associated with this month closing.', on_delete=django.db.models.deletion.CASCADE, related_name='month_closings', to='finance.bank', verbose_name='Bank')),
            ],
            options={
                'verbose_name': 'Month Closing',
                'verbose_name_plural': 'Month Closings',
            },
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('loan_amount', models.FloatField(help_text='Total amount of the loan taken.', verbose_name='Loan Amount')),
                ('remaining_amount', models.FloatField(help_text='Amount still outstanding on the loan.', verbose_name='Remaining Amount')),
                ('total_installments', models.PositiveIntegerField(help_text='Total number of installments for repayment.', verbose_name='Total Installments')),
                ('employee', models.ForeignKey(help_text='The employee who has taken the loan.', on_delete=django.db.models.deletion.CASCADE, to='employee.employee', verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Loan',
                'verbose_name_plural': 'Loans',
            },
        ),
        migrations.CreateModel(
            name='InstallmentPaid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount_paid', models.FloatField(help_text='Amount of the installment that has been paid.', verbose_name='Amount Paid')),
                ('date_paid', models.DateField(help_text='The date when the installment was paid.', verbose_name='Date Paid')),
                ('loan', models.ForeignKey(help_text='The loan for which the installment is paid.', on_delete=django.db.models.deletion.CASCADE, to='finance.loan', verbose_name='Loan')),
            ],
            options={
                'verbose_name': 'Installment Paid',
                'verbose_name_plural': 'Installments Paid',
            },
        ),
        migrations.CreateModel(
            name='IncomeTaxSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('starting_year', models.DateField(help_text='The year when the income tax session starts.', verbose_name='Starting Year')),
                ('ending_year', models.DateField(help_text='The year when the income tax session ends.', verbose_name='Ending Year')),
            ],
            options={
                'verbose_name': 'Income Tax Session',
                'verbose_name_plural': 'Income Tax Sessions',
                'indexes': [models.Index(fields=['starting_year'], name='income_tax_start_idx')],
            },
        ),
        migrations.CreateModel(
            name='IncomeTaxRates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initial_taxable_income', models.PositiveIntegerField(help_text='The starting amount of taxable income.', verbose_name='Initial Taxable Income')),
                ('to_taxable_income', models.PositiveIntegerField(help_text='The ending amount of taxable income.', verbose_name='To Taxable Income')),
                ('percentage', models.FloatField(help_text='The percentage of tax applied within this income bracket.', verbose_name='Tax Percentage')),
                ('session', models.ForeignKey(help_text='The session to which these tax rates apply.', on_delete=django.db.models.deletion.CASCADE, to='finance.incometaxsession', verbose_name='Income Tax Session')),
            ],
            options={
                'verbose_name': 'Income Tax Rate',
                'verbose_name_plural': 'Income Tax Rates',
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount of the expense.', max_digits=10, verbose_name='Expense Amount')),
                ('date', models.DateField(help_text='Date of the expense.', verbose_name='Expense Date')),
                ('description', models.TextField(help_text='Detailed description of the expense.', verbose_name='Description')),
                ('title', models.CharField(help_text='Title of the expense.', max_length=255, verbose_name='Expense Title')),
            ],
            options={
                'verbose_name': 'Expense',
                'verbose_name_plural': 'Expenses',
                'indexes': [models.Index(fields=['date'], name='expense_date_idx')],
            },
        ),
        migrations.CreateModel(
            name='EOBIPaid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('eobi_date_of_joining', models.DateField(help_text='The date when the employee joined.', verbose_name='Date of Joining')),
                ('month', models.DateField(help_text='The month for which the EOBI payment is made.', verbose_name='Month')),
                ('total_deposit', models.FloatField(help_text='Total amount deposited for EOBI.', verbose_name='Total Deposit')),
                ('created_by', models.ForeignKey(help_text='User who created this EOBI payment entry.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='eobi_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('employee', models.ForeignKey(help_text='The employee for whom the EOBI payment is made.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='eobi_employee', to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'EOBI Payment',
                'verbose_name_plural': 'EOBI Payments',
            },
        ),
        migrations.CreateModel(
            name='EmployeeArrears',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('arrears_amount', models.IntegerField(help_text='Total amount of arrears for the employee.', verbose_name='Arrears Amount')),
                ('arrears_note', models.CharField(help_text='Notes regarding the arrears.', max_length=255, verbose_name='Arrears Note')),
                ('employee', models.OneToOneField(help_text='The employee associated with these arrears.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employee_arrears', to=settings.AUTH_USER_MODEL, verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Employee Arrears',
                'verbose_name_plural': 'Employee Arrears',
            },
        ),
        migrations.CreateModel(
            name='CPFundDeposits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.PositiveIntegerField(help_text='The amount deposited to the CP fund.', verbose_name='Amount')),
                ('date_paid', models.DateField(help_text='The date when the deposit was made.', verbose_name='Date Paid')),
                ('note', models.CharField(help_text='Any additional notes regarding the deposit.', max_length=255, verbose_name='Note')),
                ('cp_fund', models.ForeignKey(help_text='The CP Fund to which the deposit is made.', on_delete=django.db.models.deletion.CASCADE, related_name='deposits', to='finance.cpfund', verbose_name='CP Fund')),
                ('created_by', models.ForeignKey(help_text='User who created this deposit entry.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cpfund_deposits_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'CP Fund Deposit',
                'verbose_name_plural': 'CP Fund Deposits',
            },
        ),
        migrations.AddIndex(
            model_name='bank',
            index=models.Index(fields=['bank_name'], name='bank_name_idx'),
        ),
        migrations.AddIndex(
            model_name='securitydeposits',
            index=models.Index(fields=['security'], name='security_deposit_security_idx'),
        ),
        migrations.AddIndex(
            model_name='securitydeposits',
            index=models.Index(fields=['date_paid'], name='security_deposit_date_idx'),
        ),
        migrations.AddIndex(
            model_name='security',
            index=models.Index(fields=['employee'], name='security_employee_idx'),
        ),
        migrations.AddIndex(
            model_name='otherdeposits',
            index=models.Index(fields=['bank'], name='other_deposit_bank_idx'),
        ),
        migrations.AddIndex(
            model_name='otherdeposits',
            index=models.Index(fields=['date'], name='other_deposit_date_idx'),
        ),
        migrations.AddIndex(
            model_name='monthclosing',
            index=models.Index(fields=['bank'], name='month_closing_bank_idx'),
        ),
        migrations.AddIndex(
            model_name='monthclosing',
            index=models.Index(fields=['month'], name='month_closing_month_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='monthclosing',
            unique_together={('bank', 'month')},
        ),
        migrations.AddIndex(
            model_name='loan',
            index=models.Index(fields=['employee'], name='loan_employee_idx'),
        ),
        migrations.AddIndex(
            model_name='installmentpaid',
            index=models.Index(fields=['loan'], name='installment_loan_idx'),
        ),
        migrations.AddIndex(
            model_name='installmentpaid',
            index=models.Index(fields=['date_paid'], name='installment_date_idx'),
        ),
        migrations.AddIndex(
            model_name='incometaxrates',
            index=models.Index(fields=['session'], name='income_tax_session_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='incometaxrates',
            unique_together={('session', 'initial_taxable_income', 'to_taxable_income')},
        ),
        migrations.AddIndex(
            model_name='eobipaid',
            index=models.Index(fields=['employee'], name='eobi_employee_idx'),
        ),
        migrations.AddIndex(
            model_name='eobipaid',
            index=models.Index(fields=['month'], name='eobi_month_idx'),
        ),
        migrations.AddIndex(
            model_name='cpfunddeposits',
            index=models.Index(fields=['cp_fund'], name='cpf_deposit_fund_idx'),
        ),
        migrations.AddIndex(
            model_name='cpfunddeposits',
            index=models.Index(fields=['date_paid'], name='cpf_deposit_date_idx'),
        ),
        migrations.AddIndex(
            model_name='cpfund',
            index=models.Index(fields=['employee'], name='cpf_employee_idx'),
        ),
    ]
